/* Generated By:JavaCC: Do not edit this line. HLConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HLConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int FOR = 11;
  /** RegularExpression Id. */
  int AND = 12;
  /** RegularExpression Id. */
  int AS = 13;
  /** RegularExpression Id. */
  int BOOL = 14;
  /** RegularExpression Id. */
  int BY = 15;
  /** RegularExpression Id. */
  int DEC = 16;
  /** RegularExpression Id. */
  int DO = 17;
  /** RegularExpression Id. */
  int ELIF = 18;
  /** RegularExpression Id. */
  int FI = 19;
  /** RegularExpression Id. */
  int FOREACH = 20;
  /** RegularExpression Id. */
  int FROM = 21;
  /** RegularExpression Id. */
  int FUN = 22;
  /** RegularExpression Id. */
  int IF = 23;
  /** RegularExpression Id. */
  int IN = 24;
  /** RegularExpression Id. */
  int INT = 25;
  /** RegularExpression Id. */
  int ISA = 26;
  /** RegularExpression Id. */
  int NOT = 27;
  /** RegularExpression Id. */
  int NUF = 28;
  /** RegularExpression Id. */
  int OD = 29;
  /** RegularExpression Id. */
  int OR = 30;
  /** RegularExpression Id. */
  int POLYN = 31;
  /** RegularExpression Id. */
  int PRINT = 32;
  /** RegularExpression Id. */
  int RETURN = 33;
  /** RegularExpression Id. */
  int STOP = 34;
  /** RegularExpression Id. */
  int THEN = 35;
  /** RegularExpression Id. */
  int TO = 36;
  /** RegularExpression Id. */
  int VAR = 37;
  /** RegularExpression Id. */
  int WHILE = 38;
  /** RegularExpression Id. */
  int X = 39;
  /** RegularExpression Id. */
  int BOOLEAN = 40;
  /** RegularExpression Id. */
  int LT = 41;
  /** RegularExpression Id. */
  int LE = 42;
  /** RegularExpression Id. */
  int GT = 43;
  /** RegularExpression Id. */
  int GE = 44;
  /** RegularExpression Id. */
  int NE = 45;
  /** RegularExpression Id. */
  int EQ = 46;
  /** RegularExpression Id. */
  int ADD = 47;
  /** RegularExpression Id. */
  int SUB = 48;
  /** RegularExpression Id. */
  int PROD = 49;
  /** RegularExpression Id. */
  int DIV = 50;
  /** RegularExpression Id. */
  int EXP = 51;
  /** RegularExpression Id. */
  int ASSIGN = 52;
  /** RegularExpression Id. */
  int LPAREN = 53;
  /** RegularExpression Id. */
  int RPAREN = 54;
  /** RegularExpression Id. */
  int LSQUARE = 55;
  /** RegularExpression Id. */
  int RSQUARE = 56;
  /** RegularExpression Id. */
  int COMMA = 57;
  /** RegularExpression Id. */
  int SEMICOL = 58;
  /** RegularExpression Id. */
  int DECIMAL = 59;
  /** RegularExpression Id. */
  int IDENTIFIER = 60;
  /** RegularExpression Id. */
  int INTEGER = 61;
  /** RegularExpression Id. */
  int STRING = 62;
  /** RegularExpression Id. */
  int LETTER = 63;
  /** RegularExpression Id. */
  int DIGIT = 64;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int NESTED_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 9>",
    "\"else\"",
    "\"for\"",
    "\"and\"",
    "\"as\"",
    "\"bool\"",
    "\"by\"",
    "\"dec\"",
    "\"do\"",
    "\"elif\"",
    "\"fi\"",
    "\"foreach\"",
    "\"from\"",
    "\"fun\"",
    "\"if\"",
    "\"in\"",
    "\"int\"",
    "\"isa\"",
    "\"not\"",
    "\"nuf\"",
    "\"od\"",
    "\"or\"",
    "\"polyn\"",
    "\"print\"",
    "\"return\"",
    "\"stop\"",
    "\"then\"",
    "\"to\"",
    "\"var\"",
    "\"while\"",
    "\"x\"",
    "<BOOLEAN>",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"<>\"",
    "\"==\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\";\"",
    "<DECIMAL>",
    "<IDENTIFIER>",
    "<INTEGER>",
    "<STRING>",
    "<LETTER>",
    "<DIGIT>",
  };

}
